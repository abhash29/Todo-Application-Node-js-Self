const express = require('express');
const app = express();
const bodyParser = require('body-parser');
var cors = require('cors');
const fs = require('fs');

const port = 3000;

app.use(bodyParser.json())
app.use(cors());

function generateId(){
    var id = Math.round(Math.random()*10000);
    return id;
}
app.get('/', (req, res) => {
    res.send("I will try to create the todo application using node js");
})


//.GET
app.get('/todos', (req, res) =>{
    fs.readFile("todos.json", "utf-8", (err, data) =>{
        if(err){
            return res.status(500).json({error: "File not found"})
        }
        res.status(200).json(JSON.parse(data));
    });
});

//.GET
app.get('/todos/:id', (req, res) => {
    fs.readFile("todos.json", "utf-8", (err, data) =>{
        if(err){
            return res.status(500).send({err: "Id not found"})
        }

        const {id} = req.params;
        const todos = JSON.parse(data);

        const todo = todos.find(todo => todo.id==id);

        if(!todo){
            return res.status(404).send("Not found");
        }
        res.status(200).json(todo);
    });
});

//.POST
app.post('/todos', (req, res) => {
    const newTodo = {
        id: generateId(),
        title: req.body.title,
        description: req.body.description,
        complete: req.body.complete
    };
    fs.readFile("todos.json", "utf-8", (err, data) => {
        if(err) throw err;
        const todos = JSON.parse(data);
        todos.push(newTodo);
        fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
            if(err) throw err;
            res.status(201).json(newTodo);
        });
    });
});

//DELETE
//Find idx
function findIndex(arr, id){
    for(let i=0; i<arr.length; i++){
        if(arr[i].id===id){
            return i;
        }
    }
    return -1;
}
//Remove idx
function removeIdx(arr, idx){
    let newArray = [];
    for(let i=0; i<arr.length; i++){
        if(i!==idx){
            newArray.push(arr[i]);
        }
    }
    return newArray;
}
app.delete('/todos/:id', (req, res) =>{
    fs.readFile("todos.json", "utf-8", (err, data) =>{
        if(err) throw err;
        let todos = JSON.parse(data);
        const todoIdx = findIndex(todos, parseInt(req.params.id));
        if(todoIdx===-1){
            res.status(404).send();
        }
        else{
            todos = removeIdx(todos, todoIdx);
            fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
                if(err) throw err;
                res.status(200).send("Item deleted");
            });
        }
    });
});

app.get("/", (res, req) => {
    res.sendFile(path.join(__dirname, "index.html"));
});

//For any other route
app.use((req, res, next) => {
    res.status(404).send();
});

app.listen(port, () => {
    console.log(`Port is running at: ${port}`);
})



//                                                      Task To do
//You need to create an express HTTP server in Node.js which will handle the logic of a todo list app
//Do not use any db ; Just store all the data in an array to store the to do list data
//Title and Description - both are strings

//1. Hard: Save responses in a file so that even if you exit the app the changes made will be available

//Each todo should also get unique an autogenerated id every time it create -> Done

//The expected API's are: 
//1. .GET  /todos - Retrieve all the todos items
///  Response: 200 ok with an array of todos in JSON format
//Example: http://localhost:3000/todos -> Done

//2. .GET /todos/:id - Retrieve a specific todo item by Id
//Response: 200 ok with the todo item in JSON Format if found otherwise 404 not found
//Example: http://localhost:3000/todos:/123 -> Done

//3. .POST /todos - Create a new Todo item
//Request body: JSON object representing the todo item
//Response: 201 Created with the id of the created todo item in JSON format: eg: {id: 1}
//Example: http://localhost:3000/todos
//Request Body: {"title: "buy milk", "Completed": "false", "Description": "Need to buy the milk"} -> Almost Done


//4. File banna hai aur sari chijo ko file mai store karna hai -> Almost Done

//5. .DELETE /todos/:id - Delete a todo item by id
//Response: 200 ok if the todo item was found and deleted, or 404 Not found
//Example: DELETE http://localhost:3000/todos/123 -> Almost Done

//6. .PUT /todos/:id - Update an existing item with id
//Request Body: JSON obj representing the updated todo item
//Response: 200 ok if item found and updated , 404 not found
//Example: PUT http://localhost:3000/:id 

